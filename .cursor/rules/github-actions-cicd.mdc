---
globs: .github/workflows/*.yml,.github/workflows/*.yaml
description: "GitHub Actions CI/CD 파이프라인 개발 가이드"
---

# GitHub Actions CI/CD 개발 가이드

## 워크플로우 구조

### 빌드 및 배포 파이프라인
```yaml
name: Build & Translate (KR→EN) and Publish Web

on:
  push:
    branches: [main]
    paths:
      - 'cursor-rules/**'     # 규칙 파일 변경
      - 'scripts/**'          # 빌드 스크립트 변경
      - 'web/**'              # 웹 정적파일 변경
```

### 권한 설정
```yaml
permissions:
  contents: write    # 파일 읽기/쓰기
  pages: write       # GitHub Pages 배포
  id-token: write    # OIDC 토큰 (Pages 배포용)
```

## 동적 빌드 시스템

### 번역 단계
```yaml
- name: Translate KR → EN & stage into web/cursor-rules
  env:
    GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  run: |
    python scripts/translate_and_copy.py
    echo "--- staged files under web/cursor-rules ---"
    find web/cursor-rules -type f -name "*.md" | sort
```

### 웹 인덱스 생성
```yaml
- name: Generate files.json & version-info.json
  run: |
    bash scripts/generate_web.sh
    echo '/*' > web/.nojekyll      # Jekyll 비활성화
    echo "--- files.json preview ---"
    head -n 50 web/files.json || true
```

### GitHub Pages 아티팩트 배포
```yaml
- name: Upload Pages artifact
  uses: actions/upload-pages-artifact@v3
  with:
    path: web/

- name: Deploy to GitHub Pages
  uses: actions/deploy-pages@v4
```

## 환경 변수 관리

### 시크릿 설정
- `GEMINI_API_KEY`: Google Gemini AI API 키
- GitHub Settings → Secrets → Repository secrets에 추가

### 환경 변수 전달
```bash
# 스크립트에서 환경변수 확인
API_KEY = os.environ.get("GEMINI_API_KEY")
if not API_KEY:
    print("GEMINI_API_KEY is not set", file=sys.stderr)
    sys.exit(1)
```

## 브랜치 전략

### 트리거 조건
```yaml
concurrency:
  group: web-gen              # 동시 빌드 방지
  cancel-in-progress: true    # 새 빌드 시 기존 빌드 취소
```

### 경로 기반 트리거
- `cursor-rules/**`: 규칙 파일 변경 시에만 빌드
- `scripts/**`: 빌드 스크립트 변경 시 빌드
- `web/**`: 웹 정적 파일 변경 시 빌드

## 에러 처리 및 디버깅

### 빌드 로그 개선
```yaml
run: |
  python scripts/translate_and_copy.py
  echo "--- staged files under web/cursor-rules ---"
  find web/cursor-rules -type f -name "*.md" | sort
  
  # 디버깅을 위한 파일 수 확인
  echo "Total files generated: $(find web/cursor-rules -name "*.md" | wc -l)"
```

### 파일 검증
```yaml
run: |
  bash scripts/generate_web.sh
  echo "--- version-info.json preview ---"
  cat web/version-info.json
  echo "--- files.json preview ---"          
  head -n 50 web/files.json || true
```

## 성능 최적화

### 캐시 전략
```yaml
- name: Setup Python
  uses: actions/setup-python@v5
  with:
    python-version: '3.11'
    cache: 'pip'              # pip 의존성 캐시
```

### 조건부 실행
```yaml
# web/ 폴더 변경사항이 있을 때만 배포
if: github.event_name == 'push' && contains(github.event.head_commit.modified, 'web/')
```

## 직접 배포 vs 커밋 방식

### 현재: 직접 배포 (권장)
```yaml
# web/ 폴더를 커밋하지 않고 직접 GitHub Pages에 배포
- name: Upload Pages artifact
  uses: actions/upload-pages-artifact@v3
  with:
    path: web/
```

### 장점
- Git 히스토리 깔끔
- Rebase conflict 없음
- 빌드 결과물과 소스 분리

### 과거: 커밋 방식 (비추천)
```yaml
# 주석 처리된 코드 - rebase hell 발생
# - name: Commit & push web/ changes
#   run: |
#     git add web/
#     git commit -m "[skip ci] docs(web): auto-update"
#     git push
```

## 모니터링 및 알림

### 빌드 상태 배지
```markdown
[![Build & Deploy](https://github.com/JINWOO-J/cursor-rules/actions/workflows/build-web.yml/badge.svg)]
```

### 실패 시 디버깅
1. Actions 탭에서 로그 확인
2. 번역 API 호출 실패 여부 확인
3. 파일 경로 문제 확인
4. GitHub Pages 배포 상태 확인

## 워크플로우 개선 팁

### 병렬 처리
```yaml
strategy:
  matrix:
    python-version: ['3.11']
```

### 조건부 스텝
```yaml
- name: Optional step
  if: success() && github.ref == 'refs/heads/main'
  run: echo "Main branch only"
```

이 CI/CD 파이프라인은 번역부터 배포까지 완전 자동화된 시스템입니다. 안정성과 성능을 고려하여 개발하세요.